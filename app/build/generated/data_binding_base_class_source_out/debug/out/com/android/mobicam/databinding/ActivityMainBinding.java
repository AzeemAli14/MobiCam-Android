// Generated by view binder compiler. Do not edit!
package com.android.mobicam.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.android.mobicam.R;
import com.android.mobicam.camera.customcomponents.CameraLayout;
import com.android.mobicam.camera.customcomponents.FlipCamera;
import com.android.mobicam.camera.customcomponents.WebRTCSurfaceView;
import com.android.mobicam.customcomponents.ExitButton;
import com.android.mobicam.customcomponents.MainLayout;
import com.android.mobicam.customcomponents.PreConnectLayout;
import com.android.mobicam.customcomponents.StartCameraButton;
import com.android.mobicam.customcomponents.StartDisplayButton;
import com.android.mobicam.display.customcomponents.BackButton;
import com.android.mobicam.display.customcomponents.DisplayLayout;
import com.android.mobicam.display.customcomponents.MirrorImage;
import com.android.mobicam.display.customcomponents.Sound;
import com.android.mobicam.display.customcomponents.VideoViewWebRTC;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final BackButton backButton;

  @NonNull
  public final com.android.mobicam.camera.customcomponents.BackButton backButtonCamera;

  @NonNull
  public final ImageView cameraIcon;

  @NonNull
  public final CameraLayout cameraLayout;

  @NonNull
  public final StartCameraButton cameraPanel;

  @NonNull
  public final LinearLayout cameraTopButtonsLayout;

  @NonNull
  public final DisplayLayout displayLayout;

  @NonNull
  public final StartDisplayButton displayPanel;

  @NonNull
  public final LinearLayout displayTopButtonsLayout;

  @NonNull
  public final ExitButton exitButton;

  @NonNull
  public final ExitButton exitButtonPreConnect;

  @NonNull
  public final FlipCamera icFlipCamera;

  @NonNull
  public final MainLayout mainLayout;

  @NonNull
  public final MirrorImage mirrorImage;

  @NonNull
  public final Sound sound;

  @NonNull
  public final LinearLayout videoControls;

  @NonNull
  public final LinearLayout videoControlsCamera;

  @NonNull
  public final VideoViewWebRTC videoView;

  @NonNull
  public final WebRTCSurfaceView videoWindow;

  @NonNull
  public final TextView waitingForConnectionText;

  @NonNull
  public final PreConnectLayout waitingToConnectLayout;

  private ActivityMainBinding(@NonNull FrameLayout rootView, @NonNull BackButton backButton,
      @NonNull com.android.mobicam.camera.customcomponents.BackButton backButtonCamera,
      @NonNull ImageView cameraIcon, @NonNull CameraLayout cameraLayout,
      @NonNull StartCameraButton cameraPanel, @NonNull LinearLayout cameraTopButtonsLayout,
      @NonNull DisplayLayout displayLayout, @NonNull StartDisplayButton displayPanel,
      @NonNull LinearLayout displayTopButtonsLayout, @NonNull ExitButton exitButton,
      @NonNull ExitButton exitButtonPreConnect, @NonNull FlipCamera icFlipCamera,
      @NonNull MainLayout mainLayout, @NonNull MirrorImage mirrorImage, @NonNull Sound sound,
      @NonNull LinearLayout videoControls, @NonNull LinearLayout videoControlsCamera,
      @NonNull VideoViewWebRTC videoView, @NonNull WebRTCSurfaceView videoWindow,
      @NonNull TextView waitingForConnectionText,
      @NonNull PreConnectLayout waitingToConnectLayout) {
    this.rootView = rootView;
    this.backButton = backButton;
    this.backButtonCamera = backButtonCamera;
    this.cameraIcon = cameraIcon;
    this.cameraLayout = cameraLayout;
    this.cameraPanel = cameraPanel;
    this.cameraTopButtonsLayout = cameraTopButtonsLayout;
    this.displayLayout = displayLayout;
    this.displayPanel = displayPanel;
    this.displayTopButtonsLayout = displayTopButtonsLayout;
    this.exitButton = exitButton;
    this.exitButtonPreConnect = exitButtonPreConnect;
    this.icFlipCamera = icFlipCamera;
    this.mainLayout = mainLayout;
    this.mirrorImage = mirrorImage;
    this.sound = sound;
    this.videoControls = videoControls;
    this.videoControlsCamera = videoControlsCamera;
    this.videoView = videoView;
    this.videoWindow = videoWindow;
    this.waitingForConnectionText = waitingForConnectionText;
    this.waitingToConnectLayout = waitingToConnectLayout;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back_button;
      BackButton backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.back_button_camera;
      com.android.mobicam.camera.customcomponents.BackButton backButtonCamera = ViewBindings.findChildViewById(rootView, id);
      if (backButtonCamera == null) {
        break missingId;
      }

      id = R.id.camera_icon;
      ImageView cameraIcon = ViewBindings.findChildViewById(rootView, id);
      if (cameraIcon == null) {
        break missingId;
      }

      id = R.id.cameraLayout;
      CameraLayout cameraLayout = ViewBindings.findChildViewById(rootView, id);
      if (cameraLayout == null) {
        break missingId;
      }

      id = R.id.cameraPanel;
      StartCameraButton cameraPanel = ViewBindings.findChildViewById(rootView, id);
      if (cameraPanel == null) {
        break missingId;
      }

      id = R.id.camera_top_buttons_layout;
      LinearLayout cameraTopButtonsLayout = ViewBindings.findChildViewById(rootView, id);
      if (cameraTopButtonsLayout == null) {
        break missingId;
      }

      id = R.id.displayLayout;
      DisplayLayout displayLayout = ViewBindings.findChildViewById(rootView, id);
      if (displayLayout == null) {
        break missingId;
      }

      id = R.id.displayPanel;
      StartDisplayButton displayPanel = ViewBindings.findChildViewById(rootView, id);
      if (displayPanel == null) {
        break missingId;
      }

      id = R.id.display_top_buttons_layout;
      LinearLayout displayTopButtonsLayout = ViewBindings.findChildViewById(rootView, id);
      if (displayTopButtonsLayout == null) {
        break missingId;
      }

      id = R.id.exit_button;
      ExitButton exitButton = ViewBindings.findChildViewById(rootView, id);
      if (exitButton == null) {
        break missingId;
      }

      id = R.id.exit_button_pre_connect;
      ExitButton exitButtonPreConnect = ViewBindings.findChildViewById(rootView, id);
      if (exitButtonPreConnect == null) {
        break missingId;
      }

      id = R.id.ic_flip_camera;
      FlipCamera icFlipCamera = ViewBindings.findChildViewById(rootView, id);
      if (icFlipCamera == null) {
        break missingId;
      }

      id = R.id.mainLayout;
      MainLayout mainLayout = ViewBindings.findChildViewById(rootView, id);
      if (mainLayout == null) {
        break missingId;
      }

      id = R.id.mirror_image;
      MirrorImage mirrorImage = ViewBindings.findChildViewById(rootView, id);
      if (mirrorImage == null) {
        break missingId;
      }

      id = R.id.sound;
      Sound sound = ViewBindings.findChildViewById(rootView, id);
      if (sound == null) {
        break missingId;
      }

      id = R.id.video_controls;
      LinearLayout videoControls = ViewBindings.findChildViewById(rootView, id);
      if (videoControls == null) {
        break missingId;
      }

      id = R.id.video_controls_camera;
      LinearLayout videoControlsCamera = ViewBindings.findChildViewById(rootView, id);
      if (videoControlsCamera == null) {
        break missingId;
      }

      id = R.id.videoView;
      VideoViewWebRTC videoView = ViewBindings.findChildViewById(rootView, id);
      if (videoView == null) {
        break missingId;
      }

      id = R.id.videoWindow;
      WebRTCSurfaceView videoWindow = ViewBindings.findChildViewById(rootView, id);
      if (videoWindow == null) {
        break missingId;
      }

      id = R.id.waiting_for_connection_text;
      TextView waitingForConnectionText = ViewBindings.findChildViewById(rootView, id);
      if (waitingForConnectionText == null) {
        break missingId;
      }

      id = R.id.waiting_to_connect_layout;
      PreConnectLayout waitingToConnectLayout = ViewBindings.findChildViewById(rootView, id);
      if (waitingToConnectLayout == null) {
        break missingId;
      }

      return new ActivityMainBinding((FrameLayout) rootView, backButton, backButtonCamera,
          cameraIcon, cameraLayout, cameraPanel, cameraTopButtonsLayout, displayLayout,
          displayPanel, displayTopButtonsLayout, exitButton, exitButtonPreConnect, icFlipCamera,
          mainLayout, mirrorImage, sound, videoControls, videoControlsCamera, videoView,
          videoWindow, waitingForConnectionText, waitingToConnectLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
